import socket
import time  # Used for the delay

# Replace with the actual challenge IP and port
ip = "94.237.54.116"  # Updated IP
port = 37665          # Updated Port

# Create a socket connection
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, port))

# Read initial server message
data = s.recv(1024).decode()
print("[SERVER] " + data)

# Flag storage
retrieved_flag = ""

# Set the number of characters to extract (adjust if needed)
max_attempts = 300  # Adjust to maximum number of attempts

# Loop to continuously retrieve characters
for index in range(max_attempts):
    char = None  # Initialize variable for storing character
    attempt_count = 0  # Initialize attempt counter
    
    while attempt_count < 3:  # Retry up to 3 times for each index
        try:
            # Send the index number to the server
            index_str = f"{index}\n"
            s.send(index_str.encode())

            # Wait for server response
            response = s.recv(1024).decode().strip()

            # Skip irrelevant prompts or non-character responses
            if "Which character (index) of the flag do you want?" in response:
                continue  # Skip and wait for the next relevant response
            
            # Check if the response is "Index out of range!"
            if "Index out of range!" in response:
                print(f"[Index {index}] Reached end of data. Stopping extraction.")
                break  # Exit the loop if the end of data is reached

            # Check if the response contains the expected format
            if "Character at Index" in response:
                char = response.split(": ")[-1]  # Extract the character after ":"
                retrieved_flag += char
                print(f"[Index {index}] {char}")  # Print index and corresponding character
                break  # Exit retry loop once character is successfully retrieved
            else:
                print(f"[Index {index}] Unexpected response format. Retrying...")
                attempt_count += 1
                time.sleep(2)  # Wait before retrying

        except Exception as e:
            print(f"[Index {index}] Error: {e}. Retrying...")
            attempt_count += 1
            time.sleep(2)  # Wait before retrying

    # Stop if unable to retrieve character after 3 retries
    if attempt_count == 3 and char is None:
        print(f"[Index {index}] Failed to retrieve character after 3 attempts. Moving to next index.")
        
    # If we reach "Index out of range", break from the loop entirely
    if "Index out of range!" in response:
        break

    # Wait before sending the next request
    time.sleep(1)

# Close the connection
s.close()

# Print the final flag
print("\n=== Extracted Flag ===")
print(retrieved_flag)
